/*
Copyright 2021 The Alibaba Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeflow/arena/pkg/operators/kubedl-operator/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CronLister helps list Crons.
type CronLister interface {
	// List lists all Crons in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Cron, err error)
	// Crons returns an object that can list and get Crons.
	Crons(namespace string) CronNamespaceLister
	CronListerExpansion
}

// cronLister implements the CronLister interface.
type cronLister struct {
	indexer cache.Indexer
}

// NewCronLister returns a new CronLister.
func NewCronLister(indexer cache.Indexer) CronLister {
	return &cronLister{indexer: indexer}
}

// List lists all Crons in the indexer.
func (s *cronLister) List(selector labels.Selector) (ret []*v1alpha1.Cron, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cron))
	})
	return ret, err
}

// Crons returns an object that can list and get Crons.
func (s *cronLister) Crons(namespace string) CronNamespaceLister {
	return cronNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CronNamespaceLister helps list and get Crons.
type CronNamespaceLister interface {
	// List lists all Crons in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Cron, err error)
	// Get retrieves the Cron from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Cron, error)
	CronNamespaceListerExpansion
}

// cronNamespaceLister implements the CronNamespaceLister
// interface.
type cronNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Crons in the indexer for a given namespace.
func (s cronNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Cron, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Cron))
	})
	return ret, err
}

// Get retrieves the Cron from the indexer for a given namespace and name.
func (s cronNamespaceLister) Get(name string) (*v1alpha1.Cron, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cron"), name)
	}
	return obj.(*v1alpha1.Cron), nil
}
